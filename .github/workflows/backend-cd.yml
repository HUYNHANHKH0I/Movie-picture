name: Backend Continuous Deployment

on:
  push:
    branches: [ "main" ]

  workflow_dispatch:
  
env:
  PYTHON_VERSION: 3.12.1
  IMAGE_REPO_NAME: backend
  IMAGE_TAG: latest
  CLUSTER_NAME: cluster
  REGION: us-east-1

jobs:
  lint-job:
    name: LINT JOB
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{env.PYTHON_VERSION}}
      
      - name: Install Linting Tools and Pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv flake8
  
      - name: Install dependencies
        run: |
          pipenv install

      - name: Run Linter
        run: |
          pipenv run lint
  test-job: 
    name: TEST JOB
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{env.PYTHON_VERSION}}
      
      - name: Install Testing Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv pytest
  
      - name: Install dependencies
        run: |
          pipenv install
  
      - name: Run Backend Tests
        run: | 
          pipenv run test
  build-job:
    name: BUILD JOB
    needs: [lint-job, test-job]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: ${{env.REGION}}

      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v2
        with: 
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: ${{env.REGION}}
          
      - name: Build and Push Docker Image
        run: |
          aws eks update-kubeconfig --name ${{env.CLUSTER_NAME}} --region ${{env.REGION}}
          kubectl get svc
          docker build -t ${{env.IMAGE_REPO_NAME}} .
          docker tag ${{env.IMAGE_REPO_NAME}}:${{env.IMAGE_TAG}} 019988862534.dkr.ecr.us-east-1.amazonaws.com/${{env.IMAGE_REPO_NAME}}:${{env.IMAGE_TAG}}
          docker push 019988862534.dkr.ecr.us-east-1.amazonaws.com/${{env.IMAGE_REPO_NAME}}:${{env.IMAGE_TAG}}
  
      - name: Deploy to AWS EKS
        run: |
          aws eks update-kubeconfig --name ${{env.CLUSTER_NAME}} --region ${{env.REGION}}
          cd k8s
          kustomize edit set image backend=019988862534.dkr.ecr.us-east-1.amazonaws.com/${{env.IMAGE_REPO_NAME}}:${{env.IMAGE_TAG}}
          kustomize build | kubectl apply -f -