name: Frontend Continuous Deployment

on:
  push:
    branches: [ "main" ]

  workflow_dispatch:

env:
  NODE_VERSION: 18.18.0
  IMAGE_REPO_NAME: frontend
  IMAGE_TAG: latest
  CLUSTER_NAME: cluster
  REGION: us-east-1

jobs:
  lint-job:
    name: LINT JOB
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}
          
      - name: Perform a cache action to restore cache before dependency install
        id: cache-npm
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-cache-${{ hashFiles('**/package-lock.json') }}
          
      - name: Install dependencies
        run: |
           npm ci
           npm install eslint --save-dev

      - name: Run lint
        run: |
          npm run lint
          
  test-job:
    name: TEST JOB
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VERSION}}
      
      - name: Perform a cache action to restore cache before dependency install
        id: cache-npm-test
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-cache-${{ hashFiles('**/package-lock.json') }}
  
      - name: Install dependencies and prettier
        run: |
          npm ci
          npm install prettier --save-dev
  
      - name: Run test
        run: npm run test
        
  deploy-job:
    name: Deploy AWS
    needs: [lint-job, test-job]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Configure AWS Credentials for Deployment
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: ${{env.REGION}}

      - name: Login AWS
        uses: aws-actions/amazon-ecr-login@v2
        with: 
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: ${{env.REGION}}
          
      - name: Build and Push Docker Image To ECT
        run: |
          aws eks update-kubeconfig --name ${{env.CLUSTER_NAME}} --region ${{env.REGION}}
          kubectl get svc
          export BACKENDLOADBALANCERIP=$(kubectl get svc backend -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}{"\n"}{.status.loadBalancer.ingress[0].ip}')
          echo "BACKENDLOADBALANCERIP=$BACKENDLOADBALANCERIP"
          docker build --build-arg REACT_APP_MOVIE_API_URL=http://$BACKENDLOADBALANCERIP -t ${{env.IMAGE_REPO_NAME}}:${{env.IMAGE_TAG}} .
          docker tag ${{env.IMAGE_REPO_NAME}}:${{env.IMAGE_TAG}} 019988862534.dkr.ecr.us-east-1.amazonaws.com/${{env.IMAGE_REPO_NAME}}:${{env.IMAGE_TAG}}
          docker push 019988862534.dkr.ecr.us-east-1.amazonaws.com/${{env.IMAGE_REPO_NAME}}:${{env.IMAGE_TAG}}
  
      - name: Deploy to AWS EKS
        run: |
          aws eks update-kubeconfig --name ${{env.CLUSTER_NAME}} --region ${{env.REGION}}
          cd k8s
          kustomize edit set image frontend=019988862534.dkr.ecr.us-east-1.amazonaws.com/${{env.IMAGE_REPO_NAME}}:${{env.IMAGE_TAG}}
          kustomize build | kubectl apply -f -
  